# -*- coding: utf-8 -*-
"""
Author: Jasper Dijkstra, adapted from model generated by ArcGIS ModelBuilder.

This script contains several functions using the Arcpy module, to apply zonal statistics operations on 
independent variable datasets. Outputs are stored as xls files.



"""
import os

# Load the Arcpy Module
import arcpy
arcpy.CheckOutExtension('Spatial')
from arcpy.sa import *



def crs(file):
    # Print CRS of given file to console
    
    arcpy.env.workspace = arcpy.GetParameterAsText(0)
    
    desc = arcpy.Describe(file)
    spatial_ref = desc.SpatialReference
    
    if spatial_ref.name == "Unknown":
        print("{0} has an unknown spatial reference".format(file))

    else:
            print("{0} : {1}".format(file, spatial_ref.name))
    
    return


def ZonalStatistics(wdir, in_zones_shp, in_value_raster, out_xls):
    """

    Parameters
    ----------
    wdir : str
        Path to Working Directory.
    in_zones_shp : str
        Path to shapefile containing the zones to retrieve data from (NUTS regions).
    in_value_raster : str
        Path to raster containing the values from which the zonal statistics have to be calculated.
    out_xls : str
        Path to output xls file.

    Returns
    -------
    XLS file saved at input parameter location.

    """
    # Set Environment Setting
    arcpy.env.workspace = os.path.join(wdir + r'\\a0Data\\a03TempData.gdb')
    arcpy.env.overwriteOutput = True
    arcpy.ImportToolbox(r"c:\users\jaspd\appdata\local\programs\arcgis\pro\Resources\ArcToolbox\toolboxes\Conversion Tools.tbx")

    # Temporary Output paths
    NUTS3_zone_raster = "NUTS3_zone_raster"
    table = "temp_table"
    
    # Process: Polygon to Raster (Polygon to Raster) (conversion)
    print("Identifying all NUTS zones")
    arcpy.conversion.PolygonToRaster(in_features = in_zones_shp, 
                                     value_field = "NUTS_ID", 
                                     out_rasterdataset = NUTS3_zone_raster, 
                                     cell_assignment = "CELL_CENTER", 
                                     priority_field = "NONE", 
                                     cellsize = in_value_raster)
    
    # Zonal Statistics as a table
    print("Performing a zonal statistics operation")
    zone_raster = arcpy.Raster(NUTS3_zone_raster)
    arcpy.sa.ZonalStatisticsAsTable(in_zone_data = zone_raster, 
                                    zone_field = "NUTS_ID", 
                                    in_value_raster = in_value_raster, 
                                    out_table = table, 
                                    ignore_nodata = "DATA", 
                                    statistics_type = "ALL", 
                                    process_as_multidimensional = "CURRENT_SLICE", 
                                    percentile_values=[100])
    
    # Save output to xls file
    print('Saving the data to an Excel file at: {}'.format(out_xls))
    arcpy.conversion.TableToExcel(Input_Table = table, 
                                  Output_Excel_File = out_xls, 
                                  Use_field_alias_as_column_header = "ALIAS", 
                                  Use_domain_and_subtype_description = "CODE")
    return
    

def ReclassLowImpactRaster(wdir, low_impact_raster_path):
    """
    This function reclassifies the input raster of the Jacobsen et al. Dataset.

    Parameters
    ----------
    wdir : str
        Path to Working Directory.
    low_impact_raster_path : str
        Path to 'Low Impact Land' raster of Jacobsen et al. (2019).

    Returns
    -------
    LIA_Reclassified : str
        Path to reclassified output raster.

    """
    # Environment Settings
    arcpy.env.workspace = os.path.join(wdir + r'\\a0Data\\a03TempData.gdb')
    arcpy.env.overwriteOutput = True
    
    # Output Dataset(s)
    LIA_Reclassified = "LIA_Reclassified"
    
    # Reclassify the data
    print('Reclassifying Low Impact Land Data...')
    LIA_Reclass = arcpy.sa.Reclassify(in_raster = arcpy.Raster(low_impact_raster_path), 
                                      reclass_field = "Value", 
                                      remap = "-128 NODATA;0 0;100 1", 
                                      missing_values = "DATA")
    
    # Save the data
    LIA_Reclass.save(LIA_Reclassified) 

    return LIA_Reclassified
